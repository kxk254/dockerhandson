django-admin startproject ecommerce

py -m venv venv

venv\Scripts\activate

pip install pillow
pip install psycopg2-binary

pip install -r requirements.txt

pytest

docker compose up -d

docker-compose up --build

pip freeze > requirements.txt


# Use an official Python runtime as a parent image
FROM python:3.13.0-slim

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container
COPY requirements.txt /app/

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the current directory contents into the container at /app
COPY . /app/


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "inventory",
        "USER": "postgres",
        "PASSWORD": "postgres",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}

docker-compose down  # Stop any running containers
docker-compose build --no-cache  # Rebuild the images without using cache
docker-compose up  # Start the containers

docker-compose run django bash

pip list

pip install -r requirements.txt



Docker Compose Yaml

version: '3.9'  # Use a compatible version

services:
  django:
    build: .
    volumes:
      - .:/app  # Mount the current directory to /app in the container
    ports:
      - "8000:8000"  # Expose Django app on port 8000
    environment:
      - DEBUG=True  # Enable Django Debug mode
      - PYTHONUNBUFFERED=1  # Prevent Python from buffering stdout/stderr

# Note: No database service needed for SQLite, as it uses a file-based database.



DOCKERFILE


# Use an official Python runtime as a parent image
FROM python:3.13.0-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set the working directory in the container
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libsqlite3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy the requirements file into the container
COPY requirements.txt /app/

# Install dependencies
RUN pip install --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Copy the current directory contents into the container at /app
COPY . /app/

# Command to run the application
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]